---
# nginx config for a multicluster auth proxy
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeapps-authproxy-config
  labels:
    app: kubeapps-authproxy
data:
  k8s-api-proxy.conf: |-
    # Disable buffering for log streaming
    proxy_buffering off;
    # Hide Www-Authenticate to prevent it triggering a basic auth prompt in
    # the browser with some clusters
    proxy_hide_header Www-Authenticate;

    # Keep the connection open with the API server even if idle (the default is 60 seconds)
    # Setting it to 1 hour which should be enough for our current use case of deploying/upgrading apps
    # If we enable other use-cases in the future we might need to bump this value
    # More info here https://github.com/kubeapps/kubeapps/issues/766
    proxy_read_timeout 1h;
  vhost.conf: |-
    # Retain the default nginx handling of requests without a "Connection" header
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    # Allow websocket connections
    proxy_set_header Upgrade    $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    server {
      listen 8080;
      listen [::]:8080;
      server_name _;

      location /healthz {
        access_log off;
        default_type text/plain;
        return 200 "healthy\n";
      }

      # Send URLs that are unprotected straight through to the kubeapps service.
      location ~ ^(/$|/config\.json$|/favicon.*\.png$|/static/) {
        proxy_pass http://kubeapps.kubeapps;
      }

      # Send URLs that are for the second-cluster to the Kubeapps frontend via
      # the oauth2-proxy instanced configured for the "second-cluster" clientid
      location ~ /clusters/second-cluster/ {
        # Add the Authorization header if exists
        add_header Authorization $http_authorization;

        proxy_pass http://127.0.0.1:3001;
      }

      # Send all other requests to the Kubeapps frontend via the
      # oauth2-proxy instance configured for the "default" clientid
      location / {
        # Add the Authorization header if exists
        add_header Authorization $http_authorization;

        proxy_pass http://127.0.0.1:3000;
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapps-authproxy
  labels:
    app: kubeapps-authproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeapps-authproxy
  template:
    metadata:
      labels:
        app: kubeapps-authproxy
    spec:      
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.19.1-debian-10-r16
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 0
            timeoutSeconds: 5
          volumeMounts:
            - name: vhost
              mountPath: /opt/bitnami/nginx/conf/server_blocks
          ports:
            - name: http
              containerPort: 8080
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
        - name: auth-proxy-default
          args:
            - --provider=oidc
            - --client-id=default
            - --client-secret=ZXhhbXBsZS1hcHAtc2VjcmV0
            - --cookie-secret=bm90LWdvb2Qtc2VjcmV0Cg==
            - --upstream=http://kubeapps.kubeapps/
            - --http-address=0.0.0.0:3000
            - --email-domain=*
            - --pass-basic-auth=false
            - --pass-access-token=true
            - --pass-authorization-header=true
            - --scope=openid email groups
            - --oidc-issuer-url=https://172.18.0.2:32000
            - --ssl-insecure-skip-verify=true
            - --redirect-url=https://localhost/oauth2/callback
            - --cookie-name=_oauth2_proxy_default
          image: docker.io/bitnami/oauth2-proxy:6.0.0-debian-10-r23
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: proxy
              containerPort: 3000
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
        - name: auth-proxy-second-cluster
          args:
            - --provider=oidc
            - --client-id=second-cluster
            - --client-secret=ZXhhbXBsZS1hcHAtc2VjcmV0LXNlY29uZC1jbHVzdGVy
            - --cookie-secret=bm90LWdvb2Qtc2VjcmV0Cg==
            - --upstream=http://kubeapps.kubeapps/
            - --http-address=0.0.0.0:3001
            - --email-domain=*
            - --pass-basic-auth=false
            - --pass-access-token=true
            - --pass-authorization-header=true
            - --scope=openid email groups
            - --oidc-issuer-url=https://172.18.0.2:32000
            - --ssl-insecure-skip-verify=true
            - --redirect-url=https://localhost/oauth2/callback
            - --cookie-name=_oauth2_proxy_second_cluster
          image: docker.io/bitnami/oauth2-proxy:6.0.0-debian-10-r23
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: proxy
              containerPort: 3000
          resources:
            limits:
              cpu: 250m
              memory: 128Mi
            requests:
              cpu: 25m
              memory: 32Mi
      volumes:
        - name: vhost
          configMap:
            name: kubeapps-authproxy-config
---
# Service to expose the authproxy
apiVersion: v1
kind: Service
metadata:
  name: kubeapps-authproxy
  labels:
    app: kubeapps-authproxy
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: http
      nodePort: 30000
      protocol: TCP
      name: http
  selector:
    app: kubeapps-authproxy
---
# Ingress with TLS so Kubeapps authproxy is served at https://localhost/
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kubeapps-authproxy
  labels: 
    app: kubeapps-authproxy
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
spec:
  rules:
    - host: localhost
      http:
        paths:
        - path: /
          backend:
            serviceName: kubeapps-authproxy
            servicePort: http
  tls:
    - hosts:
        - localhost
      secretName: localhost-tls
